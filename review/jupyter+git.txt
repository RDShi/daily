===jupyter===
安装极其方便，pip jupyter即可
本地运行极其方便，Terminal里输入jupyter notebook即可
连接远程服务器运行jupyter也极其方便：
安装：sudo pip install jupyter
设置密码
先打开python
from notebook.auth import passwd
passwd()
得到设定密码对应的sha1值
jupyter notebook --generate-config
然后修改jupyter的配置：vim ~/.jupyter/jupyter_notebook_config.py
c.NotebookApp.ip='*'                                  # 就是设置所有ip皆可访问  
c.NotebookApp.password = u'sha:ce...       # 刚才复制的那个密文'  
c.NotebookApp.open_browser = False       # 禁止自动打开浏览器  
c.NotebookApp.port =8888                         #随便指定一个端口  
c.NotebookApp.notebook_dir = 'D:\Code\jupyter-notebook' #制定启动位置

在服务器端启动 jupyter notebook 在本地登陆网页


新建一个ipy点击new->python3即可
单元格的边框为绿色为编辑模式，按ESC键，退回到命令模式，令模式下被选中的单元采用蓝色边框显示

Help->Keyboard Shortcut可以查看快捷键
常用快捷键：
L: 显示代码的行号
m/数字键: 将单元格变为markdown类型，可以编写文档和标题，可以$$用LaTex的语法
y: 将单元格变为代码类型，在代码类型的单元格中输入Python代码
dd: 删除单元格
z: 撤销最后删除单元格操作
a: 在当前单元格之上创建一个新的单元格
b: 在当前单元格之下创建一个新的单元格
x: 剪切当前单元格
c: 复制当前单元格
v: 在当前单元格之下粘贴剪切板中的单元格
shift+m:与下面的单元合并
ctrl+enter:运行当前单元格
shift+enter:运行当前单元格并自动选择下一个单元。
Alt+Enter：运行当前的代码并在下面插入新的单元。
ctrl+/：为一行或多行添加或取消注释
ii:终止循环
TAB：显示补全的代码。

对于当前环境中已知的对象，可以在其后面添加问号查看相应的说明信息和文档，添加两个问号可以查看对象对应的源程序。按Ctrl+Enter显示。
调用函数时，按[shift+tab]组合键可以显示函数的调用参数和说明文档，按一次组合键显示基本信息，两次显示详细信息，三次延时停留信息框，四次则将信息显示在下方的滑动窗口中。

%magic命令
从本地导入python文件，可以直接使用%load xxx.py，然后按Ctrl+Enter
从网络中导入python代码，可以使用%load 网址
%run xxx.py 按Ctrl+Enter后，可在jupyter中运行python文件
当在程序中使用了matplotlib绘图，不能直接显示时，需要加%matplotlib inline
设置环境%env CUDA_VISIBLE_DEVICE=5
%load xxx.py
%env CUDA_VISIBLE_DEVICES=5

可以另存为其他的文件格式，比如：md文件、pdf文档、py文件。
File->Download as->xxx

可以直接在http://nbviewer.jupyter.org/上别人分享的.ipynb
踩到的坑：reload(sys)之后的输出

===git===
##名字的含义：global information tracker/goddamn idiot truckload

##git与repo：git管理单独的模块，而repo管理所有的git库，将多个git库组合在一起，形成一个完整的大版本。

##git的基本流程：
手头程序（Working Directory）->仓库（repository）[缓存区（stage/index）->master（HEAD）]->远程仓库

##建立一个repository
下载git
进入https://github.com/并登录，然后new repository，命名blabla
在本地相应的文件下右击然后点git bush here
git init #初始化
git add * #添加所有文件，也可以选择想要改动的文件，这一步相当于把文件缓存区
git commit -m "discription" #改动提交到HEAD
git remote add origin <server> #将本地仓库链接到远程仓库，连接后不需要每次都输入
git push -u origin master #把改动push到远程仓库，可以把master改成其他分支

##参考别人的代码
点“Fork”在自己的账号下克隆了别人的仓库
然后，从自己的账号下clone：git clone https://github.com/RDShi/tensorflow.git
也可以只在从别人账号下clone，不过就无法push

##删除repository:
进入相应的repository，点击setting，最下方有Delete this repository

##版本迭代
git status：代码的状态（代码是否修改，是否提交到缓存区）
git diff：现在的代码和缓存区里的代码的差别，git diff HEAD/HEAD^
git log：查看commit的日志
gitk：图形化界面，可以查看commit信息
git reflog：查看命令历史
git reset --hard HEAD^：退回到上个版本，上n个版本HEAD~N
git reset --hard <commit id>：把HEAD移动到相应的commit版本，可以是前面的、也可以是后面的
git rm：删除仓库中的的文件
git checkout -- <file>：让file回到最近一次git commit或git add时的状态。
git reset HEAD <file>：可以把暂存区的修改撤销掉（unstage）
git fetch + git reset --hard origin/master：丢弃本地修改，变成远程仓库的版本


##标签
git tag <tagname> [<commit id>]：在HEAD[历史 commit id]上打下tag
git tag ：查看所有tag
git tag -a <tagname> -m "blablabla..."
git tag -d <tagname>：删除tag
git push origin :refs/tags/<tagname>：删除一个远程标签。


##分支管理
git checkout -b <dev>：创建分支并把HEAD切换过去=git branch <dev> + git checkout <dev>
git checkout <dev>：切换到<dev>分支
git branch：查看当前分支
git branch -d/D <dev>：删除/强行删除<dev>分支
git merge <dev>：合并<dev>分支到当前分支，有可能可以快速合并，但也有可能出现冲突，必须手动解决冲突。git status可以显示冲突的文件。
git stash：修复bug时可以保存现场，然后git stash list查看stash的信息，git stash apply stash@{0}恢复到指定的状态或者git stash pop恢复到上一个状态



##多人协作
git remote -v；查看远程仓库信息
git push origin <branch-name>：从本地推送分支，使用，如果推送失败，先用git pull抓取远程的新提交；
git checkout -b branch-name origin/branch-name：在本地创建和远程分支对应的分支
git branch --set-upstream branch-name origin/branch-name：建立本地分支和远程分支的关联
git rebase：合并历史分支信息

