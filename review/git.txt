##名字的含义：global information tracker/goddamn idiot truckload

##git与repo：git管理单独的模块，而repo管理所有的git库，将多个git库组合在一起，形成一个完整的大版本。

##git的基本流程：
手头程序（Working Directory）->仓库（repository）[缓存区（stage/index）->master（HEAD）]->远程仓库

##建立一个repository
下载git
进入https://github.com/并登录，然后new repository，命名blabla
在本地相应的文件下右击然后点git bush here
git init #初始化
git add * #添加所有文件，也可以选择想要改动的文件，这一步相当于把文件缓存区
git commit -m "discription" #改动提交到HEAD
git remote add origin <server> #将本地仓库链接到远程仓库，连接后不需要每次都输入
git push -u origin master #把改动push到远程仓库，可以把master改成其他分支

##参考别人的代码
点“Fork”在自己的账号下克隆了别人的仓库
然后，从自己的账号下clone：git clone https://github.com/RDShi/tensorflow.git
也可以只在从别人账号下clone，不过就无法push

##删除repository:
进入相应的repository，点击setting，最下方有Delete this repository

##版本迭代
git status：代码的状态（代码是否修改，是否提交到缓存区）
git diff：现在的代码和缓存区里的代码的差别，git diff HEAD/HEAD^
git log：查看commit的日志
gitk：图形化界面，可以查看commit信息
git reflog：查看命令历史
git reset --hard HEAD^：退回到上个版本，上n个版本HEAD~N
git reset --hard <commit id>：把HEAD移动到相应的commit版本，可以是前面的、也可以是后面的
git rm：删除仓库中的的文件
git checkout -- <file>：让file回到最近一次git commit或git add时的状态。
git reset HEAD <file>：可以把暂存区的修改撤销掉（unstage）
git fetch + git reset --hard origin/master：丢弃本地修改，变成远程仓库的版本


##标签
git tag <tagname> [<commit id>]：在HEAD[历史 commit id]上打下tag
git tag ：查看所有tag
git tag -a <tagname> -m "blablabla..."
git tag -d <tagname>：删除tag
git push origin :refs/tags/<tagname>：删除一个远程标签。


##分支管理
git checkout -b <dev>：创建分支并把HEAD切换过去=git branch <dev> + git checkout <dev>
git checkout <dev>：切换到<dev>分支
git branch：查看当前分支
git branch -d/D <dev>：删除/强行删除<dev>分支
git merge <dev>：合并<dev>分支到当前分支，有可能可以快速合并，但也有可能出现冲突，必须手动解决冲突。git status可以显示冲突的文件。
git stash：修复bug时可以保存现场，然后git stash list查看stash的信息，git stash apply stash@{0}恢复到指定的状态或者git stash pop恢复到上一个状态



##多人协作
git remote -v；查看远程仓库信息
git push origin <branch-name>：从本地推送分支，使用，如果推送失败，先用git pull抓取远程的新提交；
git checkout -b branch-name origin/branch-name：在本地创建和远程分支对应的分支
git branch --set-upstream branch-name origin/branch-name：建立本地分支和远程分支的关联
git rebase：合并历史分支信息

